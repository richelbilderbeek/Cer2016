{
    "collab_server" : "",
    "contents" : "context(\"add_posteriors\")\n\ntest_that(\"add_posteriors: two posteriors are added\", {\n  if (!has_beast2()) {\n    skip(\"BEAST2 absent\")\n  }\n\n  filename <- \"test-add_posteriors_1.RDa\"\n\n  # Pre clean\n  if (file.exists(filename)) {\n    file.remove(filename)\n  }\n\n  expect_false(file.exists(filename))\n  save_parameters_to_file(\n    rng_seed = 42,\n    sirg = 0.5,\n    siri = 0.5,\n    scr = 0.5,\n    erg = 0.5,\n    eri = 0.5,\n    age = 5,\n    mutation_rate = 0.1,\n    n_alignments = 1,\n    sequence_length = 10,\n    mcmc_chainlength = 10000,\n    n_beast_runs = 1,\n    filename = filename\n  )\n  add_pbd_output(filename = filename)\n  add_species_trees(filename = filename)\n  add_alignments(filename = filename)\n\n  expect_error(\n    get_posterior(\n      file = read_file(filename),\n      sti = 1, ai = 1, pi = 1\n    ),\n    \"get_posterior: get_posterior_by_index: posterior absent at index 1\"\n  )\n\n  n_posteriors_added <- add_posteriors(\n    filename = filename,\n    skip_if_output_present = FALSE,\n    verbose = TRUE\n  )\n\n  expect_equal(n_posteriors_added, 2)\n\n  posterior_1 <- get_posterior_by_index(\n    file = read_file(filename),\n    i = 1\n  )\n  posterior_2 <- get_posterior_by_index(\n    file = read_file(filename),\n    i = 2\n  )\n  expect_true(is_posterior(posterior_1))\n  expect_true(is_posterior(posterior_2))\n\n  # Cleaning up\n  # Post clean\n  if (file.exists(filename)) {\n    file.remove(filename)\n  }\n  expect_false(file.exists(filename))\n})\n\n\ntest_that(\"four posteriors are added\", {\n  if (!has_beast2()) {\n    skip(\"BEAST2 absent\")\n  }\n\n  filename <- \"test-add_posteriors_2.RDa\"\n\n  # Pre clean\n  if (file.exists(filename)) {\n    file.remove(filename)\n  }\n  expect_false(file.exists(filename))\n\n  save_parameters_to_file(\n    rng_seed = 42,\n    sirg = 0.5,\n    siri = 0.5,\n    scr = 0.5,\n    erg = 0.5,\n    eri = 0.5,\n    age = 5,\n    mutation_rate = 0.1,\n    n_alignments = 1,\n    sequence_length = 10,\n    mcmc_chainlength = 10000,\n    n_beast_runs = 2,\n    filename = filename\n  )\n  add_pbd_output(filename = filename)\n  add_species_trees(filename = filename)\n  add_alignments(filename = filename)\n\n  expect_error(\n    get_posterior_by_index(\n      file = read_file(filename),\n      i = 1\n    ),\n    \"get_posterior_by_index: posterior absent at index 1\"\n  )\n  expect_error(\n    get_posterior_by_index(\n      file = read_file(filename),\n      i = 2\n    ),\n    \"get_posterior_by_index: posterior absent at index 2\"\n  )\n\n  n_posteriors_added <- add_posteriors(\n    filename = filename,\n    skip_if_output_present = FALSE,\n    verbose = FALSE\n  )\n  expect_equal(n_posteriors_added, 4)\n\n  posterior_1 <- get_posterior_by_index(\n    file = read_file(filename),\n    i = 1\n  )\n  posterior_2 <- get_posterior_by_index(\n    file = read_file(filename),\n    i = 2\n  )\n  posterior_3 <- get_posterior_by_index(\n    file = read_file(filename),\n    i = 3\n  )\n  posterior_4 <- get_posterior_by_index(\n    file = read_file(filename),\n    i = 4\n  )\n  expect_true(is_posterior(posterior_1))\n  expect_true(is_posterior(posterior_2))\n  expect_true(is_posterior(posterior_3))\n  expect_true(is_posterior(posterior_4))\n\n  file.remove(filename)\n\n  expect_false(file.exists(filename))\n\n})\n\ntest_that(\"three posteriors are added, middle is deleted and added again\", {\n\n  if (!has_beast2()) {\n    skip(\"BEAST2 absent\")\n  }\n\n  filename <- \"test-add_posteriors_3.RDa\"\n\n  # Pre clean\n  if (file.exists(filename)) {\n    file.remove(filename)\n  }\n\n  expect_false(file.exists(filename))\n\n  save_parameters_to_file(\n    rng_seed = 42,\n    sirg = 0.5,\n    siri = 0.5,\n    scr = 0.5,\n    erg = 0.5,\n    eri = 0.5,\n    age = 5,\n    mutation_rate = 0.1,\n    n_alignments = 1,\n    sequence_length = 10,\n    mcmc_chainlength = 10000,\n    n_beast_runs = 3,\n    filename = filename\n  )\n  add_pbd_output(filename = filename)\n  add_species_trees(filename = filename)\n  add_alignments(filename = filename)\n\n  expect_error(\n    get_posterior_by_index(\n      file = read_file(filename),\n      i = 1\n    ),\n    \"get_posterior_by_index: posterior absent at index 1\"\n  )\n  expect_error(\n    get_posterior_by_index(\n      file = read_file(filename),\n      i = 2\n    ),\n    \"get_posterior_by_index: posterior absent at index 2\"\n  )\n  expect_error(\n    get_posterior_by_index(\n      file = read_file(filename),\n      i = 3\n    ),\n    \"get_posterior_by_index: posterior absent at index 3\"\n  )\n\n  n_posteriors_added <- add_posteriors(\n    filename = filename,\n    skip_if_output_present = FALSE,\n    verbose = FALSE\n  )\n\n  expect_equal(n_posteriors_added, 6)\n\n  posterior_1 <- get_posterior_by_index(\n    file = read_file(filename),\n    i = 1\n  )\n  posterior_2 <- get_posterior_by_index(\n    file = read_file(filename),\n    i = 2\n  )\n  posterior_3 <- get_posterior_by_index(\n    file = read_file(filename),\n    i = 3\n  )\n\n  expect_true(is_posterior(posterior_1))\n  expect_true(is_posterior(posterior_2))\n  expect_true(is_posterior(posterior_3))\n\n  # Delete middle\n  file <- read_file(filename)\n  file <- set_posterior_by_index(\n    file = file,\n    i = 2,\n    posterior = NA\n  )\n  saveRDS(file, file = filename)\n\n  expect_silent(\n    get_posterior_by_index(\n      file = read_file(filename),\n      i = 1\n    )\n  )\n  expect_error(\n    get_posterior_by_index(\n      file = read_file(filename),\n      i = 2\n    ),\n    \"get_posterior_by_index: posterior absent at index 2\"\n  )\n  expect_silent(\n    get_posterior_by_index(\n      file = read_file(filename),\n      i = 3\n    )\n  )\n\n  # Add middle again\n  n_posteriors_added <- add_posteriors(\n    filename = filename,\n    skip_if_output_present = FALSE\n  )\n\n  expect_equal(n_posteriors_added, 1)\n  expect_silent(\n    get_posterior_by_index(\n      file = read_file(filename),\n      i = 1\n    )\n  )\n  expect_silent(\n    get_posterior_by_index(\n      file = read_file(filename),\n      i = 2\n    )\n  )\n  expect_silent(\n    get_posterior_by_index(\n      file = read_file(filename),\n      i = 3\n    )\n  )\n\n  # Clean up\n  expect_true(file.exists(filename))\n  file.remove(filename)\n  expect_false(file.exists(filename))\n})\n\n\ntest_that(\"add_posteriors: abuse\", {\n  expect_error(\n    add_posteriors(filename = \"inva.lid\", verbose = \"TRUE not FALSE\"),\n    \"add_posteriors: verbose should be TRUE or FALSE\"\n  )\n  expect_error(\n    add_posteriors(\n      filename = \"inva.lid\",\n      skip_if_output_present = \"TRUE not FALSE\"\n    ),\n    \"add_posteriors: skip_if_output_present should be TRUE or FALSE\"\n  )\n  expect_error(\n    add_posteriors(filename = \"inva.lid\"),\n    \"add_posteriors: invalid filename\"\n  )\n})\n",
    "created" : 1470556137856.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "13198857",
    "id" : "970A243B",
    "lastKnownWriteTime" : 1470396364,
    "last_content_update" : 1470396364,
    "path" : "~/GitHubs/Cer2016/tests/testthat/test-add_posteriors.R",
    "project_path" : "tests/testthat/test-add_posteriors.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}